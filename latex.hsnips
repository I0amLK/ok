##########################################
#                                        #
#    HyperSnips MAth for LaTeX           #
#                                        #
#            2023/11/14                  #
#                                        #
#        For Hypersnips math             #
#                                        #
#                                        #
##########################################

#### Index

# 1. Global JavaScript Function
# 2. Math Notation
# 3. Greek letter
# 4. fraction
# 5. prefix mode
# 6. Superscript & Subscript
# 7. Temp
# 8. for Notes of Heenger point
# 9. for Notes of L-funtion
# 10. Modular Form
# 11. Special for eigencure



#### Global JavaScript Function ####
global
function math(context) {
  // Add defensive checks to prevent errors during parsing
  if (!context || !context.scopes || !Array.isArray(context.scopes)) {
    return false;
  }
  
  const scopes = context.scopes;
  let lastMath = -1;
  let lastNonMath = -1;
  
  for (let i = 0; i < scopes.length; i++) {
    const s = scopes[i];
    if (typeof s === 'string' && s.includes('.math')) {
      // Any scope containing ".math" counts as math (inline, display, or AMS)
      lastMath = i;
    } else if (
      typeof s === 'string' && (
        // Non‚Äëmath environment (lemma, theorem, definition, proof, remark, etc.)
        (s.includes('meta.environment') && !s.includes('.math')) ||
        // Plain text or comments
        s.startsWith('comment') ||
        s.startsWith('meta.text.normal.tex')
      )
    ) {
      lastNonMath = i;
    }
  }
  return lastMath > lastNonMath;
}

function text(context) {
  // Add defensive check here as well
  if (!context) {
    return true; // Default to text mode if no context
  }
  return !math(context);
}
endglobal

global
// Dic

    // Greek Letter

    const greek  = {
            "a" : "\\alpha",
            "b" : "\\beta",
            "c" : "\\chi",
            "d" : "\\delta",
            "e" : "\\epsilon",
            "ve": "\\varepsilon",
            "f" : "\\phi",
            "vf" : "\\varphi",
            "g" : "\\gamma",
            "h" : "\\eta",
            "i" : "\\iota",
            "j" : "\\varphi",
            "k" : "\\kappa",
            "vk": "\\varkappa",
            "l" : "\\lambda",
            "m" : "\\mu",
            "n" : "\\nu",
            "o" : "\\omicron",
            "p" : "\\pi",
            "vp" : "\\varpi",
            "q" : "\\theta",
            "vq" : "\\vartheta",
            "r" : "\\rho",
            "s" : "\\sigma",
            "vs" : "\\varsigma",
            "t" : "\\tau",
            "u" : "\\upsilon",
            "v" : "\\varpi",
            "w" : "\\omega",
            "x" : "\\xi",
            "y" : "\\psi",
            "z" : "\\zeta",
            "A" : "\\Alpha",
            "B" : "\\Beta",
            "C" : "\\Chi",
            "D" : "\\Delta",
            "E" : "\\Epsilon",
            "F" : "\\Phi",
            "G" : "\\Gamma",
            "H" : "\\Eta",
            "I" : "\\Iota",
            "K" : "\\Kappa",
            "L" : "\\Lambda",
            "M" : "\\Mu",
            "N" : "\\Nu",
            "O" : "\\Omicron",
            "P" : "\\Pi",
            "Q" : "\\Theta",
            "R" : "\\Rho",
            "S" : "\\Sigma",
            "T" : "\\Tau",
            "U" : "\\Upsilon",
            "W" : "\\Omega",
            "X" : "\\Xi",
            "Y" : "\\Psi",
            "Z" : "\\Zeta"
        };

    // prefix

    const prefix = {
        "bar" : ["\\\\overline{"             ,"}"   ],
        "fn"  : ["\\\\overset{\\\\frown}{"   ,"}"   ],
        "td"  : ["\\\\widetilde{"            ,"}"   ],
        "rm"  : ["\\\\mathrm{"               ,"}"   ],
        "hat" : ["\\\\hat{"                  ,"}"   ],
        "cr"  : ["\\\\mathscr{"              ,"}"   ],
        "bav" : ["\\\\hat{\\\\boldsymbol{"   ,"}}"  ],
        "vec" : ["\\\\vec{"                  ,"}"   ],
        "bm"  : ["\\\\boldsymbol{"           ,"}"   ],
        "bf"  : ["\\\\mathbf{"               ,"}"   ],
        "cal" : ["\\\\mathcal{"              ,"}"   ],
        "mtb" : ["\\\\mathbb{"               ,"}"    ],
        "op"  : ["\\\\operatorname{"           ,"}"   ],
        "fk"  : ["\\\\mathfrak{"             ,"}"   ],
    }

    //  block


    const block = {
        "tm" : ["Thm"        ,"brown"  ,"‚ñ∂",0],
        "tt" : ["Thm"        ,"brown"  ,"‚ñ∂",1],
        "ex" : ["Ex"         ,"teal"   ,"‚ñ∂",0],
        "pf" : ["Pf"         ,"green"  ,"‚ñ∂",0],
        "pb" : ["Problem"    ,"teal"   ,"‚ñ∂",0],
        "sn" : ["Sol"        ,"green"  ,"‚ñ∂",0],
        "df" : ["Def"        ,"purple" ,"‚ñ∂",0],
        "dd" : ["Def"        ,"purple" ,"‚ñ∂",1],
        "st" : ["Step"       ,"orange" ,"‚ñ∂",0],
        "md" : ["Method"     ,"brown"  ,"‚ñ†",0],
        "cc" : ["Case"       ,"brown"  ,"‚óè",0],
        "ds" : ["Discussion" ,"brown"  ,"‚ñ†",0],
    }

    const arrow = {
        'r' : 'right',
        'R' : 'Right',
        'l' : 'left',
        'L' : 'Left',
        'lr':'leftright',
        'Lr':'Leftright',
        'u' : 'up',
        'U' : 'Up',
        'd' : 'down',
        'D': 'Down',
        'ud':'updown',
        'Ud':'Updown',
        'rr': 'longright',
        'll': 'longleft',
        'RR': 'Longright',
        'LL': 'Longleft',
        'se': 'se',
        'sw': 'sw',
        'ne': 'ne',
        'nw': 'nw'
    }


endglobal








##########################################################
#                     Math Notation                      #
##########################################################

#### dots
#
# ... ‚á® \cdots
# ,,, ‚á® \vdots
# ... ‚á® \ddots

context math(context)
snippet `\.\.\.` "cdots" iA
``rv='\\cdots '``
endsnippet

context math(context)
snippet `,,,` "vdots" iA
``rv='\\vdots '``
endsnippet

context math(context)
snippet `:::` "ddots" iA
``rv='\\ddots '``
endsnippet

#### integral  & Big Operators
#
# int   ‚á® \int   ‚ïë ‚à´
# iint  ‚á® \iint  ‚ïë ‚à´‚à´
# iiint ‚á® \iiint ‚ïë ‚à´‚à´‚à´
# oint  ‚á® \oint  ‚ïë ‚àÆ
# oiint ‚á® \oiint ‚ïë ‚àØ

context math(context)
priority 10
snippet `(?<=[^s])(?<!\\)[iI]nt` "int" iA
\\int
endsnippet

context math(context)
priority 20
snippet `[\\]?iint` "iint" iA
\\iint
endsnippet

context math(context)
priority 100000
snippet `[\\]?iiint` "iiint" iA
\\iiint
endsnippet

context math(context)
priority 200000
snippet `(?<!\\)oint` "oint" iA
\\oint
endsnippet

context math(context)
priority 200000
snippet `[\\]?oiint` "oiint" iA
\\oiint
endsnippet


# lim;      ‚á® \lim
# sum;      ‚á® \sum
# intd     ‚á® int_{‚ñÆ}^{‚ñÆ}
# limd     ‚á® lim_{‚ñÆ \to ‚ñÆ}
# \inta     ‚á® \int a
# \lim sup ‚á® \limsup

context math(context)
snippet `(?<!\\)(lim|sum);` "lim" iA
\\``rv=m[1]``
endsnippet


context math(context)
snippet `(lim|limsup|liminf)d` "lim and limsup" iA
``rv=m[1]``_{$1 \\to $2}$0
endsnippet


context math(context)
snippet `(int|bigcap|bigcup|sum)d` "sum and int" iA
``rv=m[1]``_{$1}^{$2}
endsnippet


context math(context)
snippet `(?<=\\lim)[ ]?(inf|sup)` "limsup&liminf" iA
``rv=m[1]``
endsnippet

context math(context)
snippet `(int|\\lim|\\sum)([a-ce-zA-CE-Z])` "space after int" iA
``rv=m[1]+" "+m[2]``
endsnippet


#### infinity
#
# oo      ‚á® \infty


context math(context)
snippet `oo` "infinity" iA
\\infty
endsnippet



#### derivative & partiAl derivative
#
# DD  ‚á® \frac{\mathrm{d}‚ñÆ}{\mathrm{d}‚ñÆ}  ‚ïë ùó±‚ñÆ/ùó±‚ñÆ
# PP  ‚á® \frac{\partiAl ‚ñÆ}{\partiAl ‚ñÆ}    ‚ïë ‚àÇ‚ñÆ/‚àÇ‚ñÆ
# drm ‚á® \mathrm{\,d}                      ‚ïë  ùó±        ‚ïë `priority 200` for √ó‚á® \overline{h}
# ptl ‚á® \partiAl                          ‚ïë  ‚àÇ


# context math(context)
# snippet `DD` "diffraction" iA
# \\frac{\\mathrm{d}$1}{\\mathrm{d}$2}
# endsnippet

# context math(context)
# snippet `PP` "partiAl diffraction" iA
# \\frac{\\partiAl $1}{\\partiAl $2}
# endsnippet


context math(context)
priority 200
snippet `(\w)?drm` "dif" iA
``rv=m[1]?(m[1]+" "):""``\\mathrm{\\,d}
endsnippet

context math(context)
snippet `ptl` "partiAl" iA
``rv="\\partiAl "``
endsnippet



#### Arrows
#### use `arrow` dictionary
#
# ra; ‚á® \rightarrow
# iA; ‚á® \implies
# fa; ‚á® \iff
# to; ‚á® \to
# la; ‚á® \leftarrow
# da; ‚á® \downarrow
# ua; ‚á® \uparrow
# lr; ‚á® \leftrightarrow



context math(context)
priority 10

snippet `(r|R|l|L|lr|Lr|u|U|d|D|ud|Ud|rr|ll|RR|LL|se|sw|ne|nw)a;` "arrows" iA
``rv="\\"+arrow[m[1]]+"arrow ";``
endsnippet


context math(context)
snippet `iA;` "implies" iA
``rv='\\implies '``
endsnippet

context math(context)
snippet `fa;` "iff" iA
``rv='\\iff '``
endsnippet

context math(context)
snippet `to;` "to" iA
``rv='\\to '``
endsnippet

context math(context)
snippet `la;` "leftarrow" iA
``rv='\\leftarrow '``
endsnippet

context math(context)
snippet `da;` "downarrow" iA
``rv='\\downarrow '``
endsnippet

context math(context)
snippet `ua;` "uparrow" iA
``rv='\\uparrow '``
endsnippet

context math(context)
snippet `lr;` "leftrightarrow" iA
``rv='\\leftrightarrow '``
endsnippet




#### greater & less notations
#
# <= ‚á® \leq
# >= ‚á® \geq
# << ‚á® \ll
# >> ‚á® \gg
# >~ ‚á® \lesssim
# <~ ‚á® \gtrsim

context math(context)
snippet `>=` "‚â•" iA
``rv='\\geq '``
endsnippet

context math(context)
snippet `<=` "‚â§" iA
``rv='\\leq '``
endsnippet

context math(context)
snippet `<<` "‚â™" iA
``rv='\\ll '``
endsnippet

context math(context)
snippet `>>` "‚â´" iA
``rv='\\gg '``
endsnippet

context math(context)
snippet `<~` "‚â≤" iA
``rv='\\lesssim '``
endsnippet

context math(context)
snippet `>~` "‚â≥" iA
``rv='\\gtrsim '``
endsnippet





#### Square
#
# sq    ‚á® \sqrt{‚ñÆ}

context math(context)
snippet `(?<!\\)sq` "square" iA
\\sqrt{$1}
endsnippet

#### set notations
#
# RR            ‚á® \mathbb{R}     ‚ïë  ‚Ñù
# CC            ‚á® \mathbb{C}     ‚ïë  ‚ÑÇ
# ZZ            ‚á® \mathbb{Z}     ‚ïë  ‚Ñ§
# NN            ‚á® \mathbb{N}     ‚ïë  ‚Ñï
# QQ            ‚á® \mathbb{Q}     ‚ïë  ‚Ñö
# \mathbb{R}+   ‚á® \mathbb{R}_+   (RR+ ‚á® ‚Ñù‚Å∫)
# \mathbb{R}n   ‚á® \mathbb{R}^n   (RRn ‚á® ‚Ñù‚Åø)
# \mathbb{R}3   ‚á® \mathbb{R}^3   (RR3 ‚á® ‚Ñù¬≥)

context math(context)
priority -10000
snippet `([A-Z])\1` "mathbb style for double capital letters" bA
\\mathbb{``rv=m[1]``}
endsnippet

# context math(context)
# priority 9000000
# snippet `RR|CC|ZZ|NN|QQ` "sets" iA
# \\mathbb{``rv=m[0].charAt(0)``}
# endsnippet


context math(context)
priority 2000000
snippet `(\\mathbb\{R\})([mnkl\d])` "rset^n" iA
\\mathbb{R}^{``rv=m[2]``}
endsnippet


context math(context)
priority 2000000
snippet `(\\mathbb\{R\})\+` "rset_+" iA
\\mathbb{R}_+
endsnippet




#### Binary Operation & Relation Symbols
#
# == ‚á® \equiv   ‚ïë     ‚â°
# OO ‚á® \cdot    ‚ïë     ¬∑
# ~~ ‚á® \sim     ‚ïë     ~
# NN ‚á® \cap     ‚ïë     ‚à©
# UU ‚á® \cup     ‚ïë     ‚à™
# II ‚á® \in      ‚ïë     ‚àà
# XX ‚á® \times   ‚ïë     √ó
# opo ‚á® \oplus  ‚ïë     ‚äï
# oxo ‚á® \otimes ‚ïë     ‚äó
# omo ‚á® \ominus ‚ïë     ‚äñ
# oco ‚á® \propto ‚ïë     ‚àù


context math(context)
 && !isAlignedEnvironment(editor)
snippet `==` "xlongequal" iA
\\equiv``rv=' '``
endsnippet

context math(context)
snippet `OO` "cdot" iA
\\cdot``rv=' '``
endsnippet

context math(context)
snippet `~~` "sim" iA
\\sim``rv=' '``
endsnippet

context math(context)
snippet `NN` "cap" iA
\\cap``rv=' '``
endsnippet

context math(context)
snippet `UU` "cup" iA
\\cup``rv=' '``
endsnippet

context math(context)
snippet `II` "in" iA
\\in``rv=' '``
endsnippet

context math(context)
snippet `XX` "times" iA
\\times``rv=' '``
endsnippet

context math(context)
snippet `OP` "oplus" iA
\\oplus``rv=' '``
endsnippet

context math(context)
snippet `omo` "oplus" iA
\\ominus``rv=' '``
endsnippet

context math(context)
snippet `OX` "otimes" iA
\\otimes``rv=' '``
endsnippet

context math(context)
snippet `OP` "oplus" iA
\\propto``rv=' '``
endsnippet




#### other operators and notations
#
# nbl ‚á® \nable          ‚ïë   ‚ñΩ
# AA  ‚á® \forall         ‚ïë   ‚àÄ
# EE  ‚á® \exist          ‚ïë   ‚àÉ
# abs ‚á® \left|‚ñÆ\right|
# ||  ‚á® \left|‚ñÆ\right|
# !=  ‚á® \not =          ‚ïë   ‚â†
# <> ‚á® \langle‚ñÆ\rangle  ‚ïë   ‚â†

context math(context)
snippet `(\\?)(nbl)` "nabla" iA
``rv='\\\\nabla '``
endsnippet

context math(context)
snippet `AA` "forall" iA
\\forall``rv=' '``
endsnippet

context math(context)
snippet `EE` "exist" iA
\\exist``rv=' '``
endsnippet

context math(context)
snippet `(\|\||abs)` "abs" iA
\\left|$1\\right|$0
endsnippet

context math(context)
snippet `\!=` "not =" iA
\\not =
endsnippet

context math(context)
snippet `tt` "text" iA
\\text{$1}$0
endsnippet

context math(context)
snippet `<>` "langle" iA
\langle $1 \rangle$0
endsnippet



#########################################################
#                      Greek letter                     #
#########################################################

#### Greek letter
#### use `greek` dictionary
#
# alpha ‚á® \alpha ‚ïë Œ±
# a;    ‚á® \alpha ‚ïë Œ±

context math(context)
snippet `[\\]?(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta|ket|bra)` "greek" iA
\\``rv=m[1]``
endsnippet

context math(context)
snippet `(?<![a-zA-Z])([a-zA-IK-UW-Z]|v[efkpqs]);` "greek" iA
``rv=greek[m[1]];``
endsnippet

#### var perfix
#
# phivar ‚á® \varphi

context math(context)
snippet `\\(epsilon|phi|pi|sigma|theta|kappa)[ ]?var` "var greek" iA
\\var``rv=m[1]``
endsnippet

#### space after Greek letter
#
# \alphab ‚á® \alpha b

context math(context)
snippet `\\(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)([a-zA-z])` "space after greek letter" iA
``rv='\\\\'+m[1]+' '+m[2]``
endsnippet




#########################################################
#                         fraction                      #
#########################################################
context math(context)
 && !isUnitMode(editor)
snippet `//` "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context math(context)
priority 10
 && !isUnitMode(editor)
snippet `((\d+)|(\d*)([A-Za-z]+|[a-zA-Z]?\\(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta))((\^|_)(\{\w+\}|\w)|')*)/` "Fraction " A
\\frac{``rv = m[1]``}{$1}$0
endsnippet





#########################################################
#                        prefix mode                    #
#########################################################

#### use `prefix` dictionary
context math(context)
snippet `((?<![_\^])\d+|((?<![_\^])\d*)([A-Za-z]+|\\(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)[ ]?))(?<!\\)(bar|fn|td|rm|hat|cr|bav|vec|bm|bf|cal|vdt|mtb|fk|op)` "prefix mode" iA
``
let testPrefix = prefix[m[m.length-1]];
rv = testPrefix[0] + m[1] + testPrefix[1];
``
endsnippet


context math(context)
priority 100
snippet `((?<![_\^])\d+|(?:(?<![_\^])\d*)(?:[A-Za-z]+|\\(?:alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)[ ]?)[']*)(((\^|_)(\{\w+\}|\w))+)(?<!\\)(bar|fn|td|rm|hat|cr|bav|vec|bm|bf|cal|fk|op)` "prefix mode" iA
``
let testPrefix = prefix[m[m.length-1]];
rv = testPrefix[0] + m[1] + testPrefix[1]+m[2];
``
endsnippet



#########################################################
#                Superscript & Subscript                #
#########################################################

#### Superscript
#
# pw  ‚á® ^{‚ñÆ}


context math(context)
snippet `(?<!\\)pw` "^n" iA
^{$1}$0
endsnippet




#### Subscript
#
# sc        ‚á® _{‚ñÆ}
# a1        ‚á® a_1
# a11       ‚á® a_{11}
# rmm       ‚á® r_m
# a_xx     ‚á® a_{xx}
# \alpha mm ‚á® \alpha _m



context math(context)
snippet `(?<!(math|\\))sc` "script main" iA
_{$1}$0
endsnippet

context math(context)
snippet `([A-Za-z])(\d)` "auto subscript" iA
`` rv = m[1] + "_" + m[2]``
endsnippet

context math(context)
priority 100
snippet `([A-Za-z])_(\d{2})` "auto subscript" iA
`` rv = m[1] + "_{" + m[2] + "}" ``
endsnippet

context math(context)
snippet `\b(?<!\\)([A-Za-z}])([A-Za-z])\2` "auto subscript 2" iA
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

context math(context)
priority 10000
snippet `(?<!\\)([A-Za-z])(_[A-Za-z]{2,})` "auto subscript 3" iA
`` rv = m[1] + m[2].replace(/_/g, "_{") + "}" ``
endsnippet

context math(context)
snippet `(?<!_)\\(alpha|beta|chi|delta|epsilon|varepsilon|phi|varphi|gamma|eta|iota|kappa|varkappa|lambda|mu|nu|omicron|pi|varpi|theta|vartheta|rho|sigma|varsigma|tau|upsilon|omega|xi|psi|zeta|Alpha|Beta|Chi|Delta|Epsilon|Phi|Gamma|Eta|Iota|Kappa|Lambda|Mu|Nu|Omicron|Pi|Theta|Rho|Sigma|Tau|Upsilon|Omega|Xi|Psi|Zeta)[']*[ ]?([a-z])\2{1}` "for \alpha_x" iA
`` rv = '\\' + m[1] + "_" + m[2].substring(0, 1) ``
endsnippet


########################################################
#                     Temp                             #
########################################################

#### autoclose bracket
#
# (  ‚á® ()
# [  ‚á® []
# {  ‚á® {}
# \{ ‚á® \{\}

# context math(context)
# snippet `(?<!\\left)\(` "bracket" iA
# ($1)$0
# endsnippet

context math(context)
snippet `(?<!\\left)\[` "bracket" iA
[$1]$0
endsnippet

context math(context)
priority 100

snippet `\\\[` "bracket" iA
\\[$1\\]$0
endsnippet


context math(context)
priority 100

snippet `\\\(` "bracket" iA
\\($1\\)$0
endsnippet


context math(context)
priority 10000
snippet `(?<!\\left)\\\{` "bracket" iA
\\{$1\\}$0
endsnippet







#########################################################
#                for Notes of Heenger point             #
#########################################################

### begin environment
#
# be ‚á® \begin{env} ‚ñÆ \end{env}

snippet be "begin environment" 
\\begin{$1}
    $2
\\end{$1}
endsnippet

### proposition environment
#
# pe ‚á® \begin{proposition} ‚ñÆ \end{proposition}


snippet pe "proposition environment" 
\\begin{proposition}
    $1
\\end{proposition}
endsnippet

### thereom environment
#
# te ‚á® \begin{theorem} ‚ñÆ \end{theorem}


snippet te "theorem environment" 
\\begin{theorem}
    $1
\\end{theorem}
endsnippet

### mynotes environment
#
# me ‚á® \begin{mynotes} ‚ñÆ \end{mynotes}

snippet me "mynotes environment" 
\\begin{mynotes}
    $1
\\end{mynotes}
endsnippet

### Example environment
#
# ee ‚á® \begin{example} ‚ñÆ \end{example}

snippet ee "example environment" 
\\begin{Example}
    $1
\\end{Example}
endsnippet

### math font character
#
# mb; ‚á® \mathbb{‚ñÆ}
# cal ‚á® \mathcal{‚ñÆ}
# frak ‚á® \mathfrak{‚ñÆ}
# scr ‚á® \mathscr{‚ñÆ}

context math(context)
snippet `mb;` "mathbb" iA
\\mathbb{$1}$0
endsnippet

context math(context)
snippet `cal` "mathcal" iA
\\mathcal{$1}$0
endsnippet

context math(context)
snippet `frak` "mathfrak" iA
\\mathfrak{$1}$0
endsnippet

context math(context)
snippet `scr` "mathscr" iA
\\mathscr{$1}$0
endsnippet

#### math font character

context math(context)
snippet `([a-zA-Z]|\d)mb` "blackboard bold" iA
`` rv = "\\mathbb{" + m[1] + "}"  ``
endsnippet

# characterfk ---> frak(characters)



# charactercal ---> cal(characters)


### font character
#
# bt ‚á® \textbf{‚ñÆ}
# xt ‚á® \textit{‚ñÆ}
# tt ‚á® \text{‚ñÆ}


snippet bt "textbf" 
\\textbf{$1}$0
endsnippet

snippet xt "textit" 
\\textit{$1}$0
endsnippet

context math(context)
snippet tt "text" 
\\text{$1}$0
endsnippet

### bold Definition.
#
# eD ‚á® \begin{Def} 

context text(context)
snippet eD "begin Def"
\\begin{Def}
    $1 
\\end{Def}
endsnippet



### img 
#
# img ‚á® \begin{figure}[H]
#

snippet img "img" 
\\begin{figure}[H]
    \centering
    \includegraphics[width=0.8\textwidth]{$1}
    \caption{$2}
    \label{fig:$3}
\\end{figure}
endsnippet

### inline math mode
#
# i- ‚á® $‚ñÆ$
#
context text(context)
snippet i- "inline math mode" A
\\( $0\\)
endsnippet

### center line math mode
#
# d- ‚á® $$‚ñÆ$$
#
context text(context)
snippet d- "center line math mode" A
\\[ $0\\]
endsnippet


### operatorname
#
# op ‚á® \operatorname{‚ñÆ}
#

context math(context)
snippet `op;` "operatorname" iA
\\operatorname{$1}$0
endsnippet

### inverse limit 
#
# ilim ‚á® \varprojlim_{‚ñÆ} ‚ñÆ
#

context math(context)
snippet `ilim` "inverse limit" iA
\\varprojlim_{$1}$0
endsnippet

### direct limit
#
# dlim ‚á® \varinjlim_{‚ñÆ} ‚ñÆ
#

context math(context)
snippet `dlim` "direct limit" iA
\\varinjlim_{$1}$0
endsnippet



#########################################################
#                for Notes of L-funtion                 #
#########################################################

### group of G_{Q,S}
#
# GQS ‚á® \G_{\mathbb{Q},S}
#

context math(context)
snippet `GQS` "G_{Q,S}" iA
G_{\mathbb{Q},S}
endsnippet

### Homorphism
#
# Hom ‚á® \operatorname{Hom}
#

context math(context)
snippet `Hom` "Hom" iA
\\operatorname{Hom}
endsnippet

### Endomorphism
#
# End ‚á® \operatorname{End}
#

context math(context)
snippet `End` "End" iA
\\operatorname{End}
endsnippet

### p-adic 
#
# p-adic ‚á® \(p\)-adic
#

snippet p-adic "p-adic" i 
\\(p\\)-adic
endsnippet

### Z_p 
#
# Zp ‚á® \mathbb{Z}_p
#

# context math(context)
# snippet `Zp` "Z_p" iA
# \\mathbb{Z}_p
# endsnippet

### Q_p
#
# Qp ‚á® \mathbb{Q}_p
#

context math(context)
snippet `Q_p` "Q_p" iA
\\mathbb{Q}_p
endsnippet

### stackrel map
#
# sto ‚á® \stackrel{‚ñÆ}{‚ñÆ}
#

context math(context)
snippet `sto` "stackrel map" iA
\\stackrel{$1}{$2}
endsnippet

### Kernel
#
# Ker ‚á® \operatorname{Ker}
#

context math(context)
snippet `Ker` "Ker" iA
\\operatorname{Ker}
endsnippet

### Coker
#
# Coker ‚á® \operatorname{Coker}
#

context math(context)
snippet `Coker` "Coker" iA
\\operatorname{Coker}
endsnippet

### Im
#
# Im ‚á® \operatorname{Im}
#

context math(context)
snippet `Im` "Im" iA
\\operatorname{Im}
endsnippet


### Ext 
#
# Ext ‚á® \operatorname{Ext}
#

context math(context)
snippet `Ext` "Ext" iA
\\operatorname{Ext}
endsnippet


#########################################################
#               Modular Form                            #
#########################################################

### moudlar form
#
# Mk_1 ‚á® M_k(\Gamma_{1}(N))
# Mk_0 ‚á® M_k(\Gamma_{0}(N))
# Mkn  ‚á® M_k(\Gamma(N))

context math(context)
priority 100000
snippet `Mk1` "Modular form" iA
M_k(\Gamma_{1}(N))$0
endsnippet

context math(context)
priority 100000
snippet `Mk0` "Modular form" iA
M_k(\Gamma_{0}(N))$0
endsnippet

context math(context)
snippet `Mkn` "Modular form" iA
M_k(\Gamma(N))$0
endsnippet

### cuspical form
#
# Sk1 ‚á® S_k(\Gamma_{1}(N))
# Sk0 ‚á® S_k(\Gamma_{0}(N))
# Skn  ‚á® S_k(\Gamma(N))

context math(context)
priority 100000
snippet `Sk1` "cuspical form" iA
S_k(\Gamma_{1}(N))$0
endsnippet

context math(context)
priority 100000
snippet `Sk0` "cuspical form" iA
S_k(\Gamma_{0}(N))$0
endsnippet


context math(context)
snippet `Skn` "cuspical form" iA
S_k(\Gamma(N))$0
endsnippet

### Eisenstein series
#
# Ek_1 ‚á® E_k(\Gamma_{1}(N))
#
context math(context)
priority 100000
snippet `Ek1` "Eisenstein series" iA
\\mathcal{E}_k(\Gamma_{1}(N))$0
endsnippet

#########################################################
# Special for eigencure

### modular form with omega weight, level Gamma 1(N), and coefficient in K 
#
# MwK ‚á® M_{\omega}(\Gamma_{1}(N),K)
#

context math(context)
snippet `MwK` "Modular form" iA
M_{\\omega}(\Gamma_{1}(N),K)$0
endsnippet

### cuspical modular form with omega weight, level Gamma 1(N), and coefficient in K 
#
# SwK ‚á® M_{\omega}(\Gamma_{1}(N),K)
#
context math(context)
snippet `SwK` "cuspical form" iA
S_{\\omega}(\Gamma_{1}(N),K)$0
endsnippet


### Galois group of maximal extension outside of Np
#
# GQN ‚á® G_{\mathbb{Q},Np}
#

context math(context)
snippet `GQN` "G_{Q,Np}" iA
G_{\\mathbb{Q},Np}
endsnippet

########################################################
#     operatorname systle words                        #
########################################################

### Spectral 
#
# Spec ‚á® \operatorname{Spec}
#
context math(context)
snippet `Spec` "Spec" iA
\\operatorname{Spec}
endsnippet

### Galois group
#
# Gal ‚á® \operatorname{Gal}
#
context math(context)
snippet `Gal` "Gal" iA
\\operatorname{Gal}
endsnippet

### Aut
#
# Aut ‚á® \operatorname{Aut}
#
context math(context)
snippet `Aut` "Aut" iA
\\operatorname{Aut}
endsnippet

### GL
#
# GL ‚á® \operatorname{GL}
#
context math(context)
snippet `GL` "GL" iA
\\operatorname{GL}
endsnippet


### Proj
#
# Proj ‚á® \operatorname{Proj}
#

context math(context)
snippet `Proj` "Proj" iA
\\operatorname{Proj}
endsnippet



### surjective arrow
#
# sa; ‚á® \twoheadrightarrow
#
context math(context)
snippet `sa;` "surjective arrow" iA
\\twoheadrightarrow
endsnippet


### injective arrow
#
# ina; ‚á® \hookrightarrow
#
context math(context)
snippet `ina;` "injective arrow" iA
\\hookrightarrow
endsnippet

### arrow 
#
# -> ‚á® \longrightarrow
#
context math(context)
snippet `->` "longrightarrow" iA
\\longrightarrow
endsnippet

### map to 
#
# |-> ‚á® \mapsto
#
context math(context)
snippet `\|->` "mapsto" iA
\\mapsto
endsnippet



### time and otimes
#
# XX ‚á® \times
# OX ‚á® \otimes
#
context math(context)
snippet `XX` "times" iA
\\times
endsnippet

context math(context)
snippet `OX` "otimes" iA
\\otimes
endsnippet


### subset
#
#
# sub ‚á® subset
#
context math(context)
snippet `sub` "subset" iA
\\subset
endsnippet




### Auto take alone character as math

context text(context)
snippet `([^'])\b((?![aAI])[a-zA-Z])\b([\n\s\.,])` "Treat lone characters as math (except a, A, I)" wA
``rv =m[1]``\\(``rv=m[2]``\\)``rv=m[3]``
endsnippet



### ord --> operatorname{ord} 

context math(context)
snippet `ord` "ord" iA
\\operatorname{ord}
endsnippet

###-------------------------------------------------------------------------------------------------------------------------------------------------------- The snippets of coding theory ------------------------------------------------------------------------------------------------------------------------------------------

# context math(context)
# snippet `wt` "weight" iA
# \\operatorname{wt}
# endsnippet

# Mathematical operators and text snippets
# Convert mathematical operators to \operatorname{} and text terms to \text{} automatically

context math(context)
snippet `(Hom|End|Aut|Gal|Spec|Sch|Proj|GL|SL|PGL|PSL|Sp|Tr)` "auto operator" iA
``rv = "\\mathrm{" + m[1] + "}"``
endsnippet

